{
  "openapi": "3.0.1",
  "info": {
    "title": "task11_api",
    "version": "2024-11-20T17:39:45Z"
  },
  "servers": [
    {
      "url": "https://qcr6r6y36b.execute-api.eu-central-1.amazonaws.com/{basePath}",
      "variables": {
        "basePath": {
          "default": "api"
        }
      }
    }
  ],
  "paths": {
    "/reservations": {
      "get": {
        "summary": "Retrieve a list of reservations",
        "description": "Fetches a list of all table reservations, providing details such as table numbers, client names, dates, and times for each reservation.",
        "responses": {
          "200": {
            "description": "The request has succeeded. The server has provided a list of reservations as specified in the response body.",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reservations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Reservation"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was an error in the request. The request was formed incorrectly and could not be processed."
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "type": "aws_proxy",
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:905418349556:function:api_handler/invocations",
          "responses": {
            "default": {
              "statusCode": "200",
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          },
          "passthroughBehavior": "when_no_match"
        }
      },
      "post": {
        "summary": "Create a new reservation",
        "description": "Creates a new table reservation with the provided details. This includes assigning a table number, client details, and reservation timing.",
        "requestBody": {
          "description": "Data needed to create a new reservation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reservation created successfully.",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Input data is invalid."
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "type": "aws_proxy",
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:905418349556:function:api_handler/invocations",
          "responses": {
            "default": {
              "statusCode": "200",
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          },
          "passthroughBehavior": "when_no_match"
        }
      }
    },
    "/tables": {
      "get": {
        "summary": "Retrieve a list of tables",
        "description": "Fetches a list of all tables in the restaurant, including details such as table numbers, capacity, VIP status and minimum orders if applicable.",
        "responses": {
          "200": {
            "description": "List of tables retrieved successfully.",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tables": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Table"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "type": "aws_proxy",
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:905418349556:function:api_handler/invocations",
          "responses": {
            "default": {
              "statusCode": "200",
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          },
          "passthroughBehavior": "when_no_match"
        }
      },
      "post": {
        "summary": "Create a new table",
        "description": "Creates a new table with specified attributes such as number, places, VIP status, and an optional minimum order. This endpoint is used to add new tables to the restaurant layout.",
        "requestBody": {
          "description": "Data required to create a new table",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TableRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Table created successfully.",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. The request data is invalid."
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "type": "aws_proxy",
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:905418349556:function:api_handler/invocations",
          "responses": {
            "default": {
              "statusCode": "200",
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          },
          "passthroughBehavior": "when_no_match"
        }
      }
    },
    "/signin": {
      "post": {
        "summary": "User sign-in",
        "description": "Authenticates a user with their email and password.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignInRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The request has succeeded. The server has processed the sign-in request, and the provided credentials were valid. The response contains an access token, which will be used for subsequent authenticated requests.",
            "headers": {
              "Access-Control-Allow-Origin": {
                "description": "Specifies the permitted origins",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignInResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. There was an error in the request, such as missing or invalid parameters."
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "aws_proxy",
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:905418349556:function:api_handler/invocations",
          "responses": {
            "default": {
              "statusCode": "200",
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          },
          "passthroughBehavior": "when_no_match"
        }
      }
    },
    "/signup": {
      "post": {
        "summary": "User sign-up",
        "description": "Registers a new user with the provided details.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignUpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sign-up process is successful.",
            "headers": {
              "Access-Control-Allow-Origin": {
                "description": "Specifies the permitted origins",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. There was an error in the request such as missing or invalid parameters."
          }
        },
        "x-amazon-apigateway-integration": {
          "type": "aws_proxy",
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:905418349556:function:api_handler/invocations",
          "responses": {
            "default": {
              "statusCode": "200",
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          },
          "passthroughBehavior": "when_no_match"
        }
      }
    },
    "/tables/{tableId}": {
      "get": {
        "summary": "Retrieve table information",
        "description": "Fetches details of a specific table by tableId.",
        "parameters": [
          {
            "name": "tableId",
            "in": "path",
            "required": true,
            "description": "The ID of the table to retrieve.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded. The server has processed the request and has returned information about the table specified by tableId. The response body contains details such as the table's ID, number, capacity, whether it's in the VIP hall, and optionally, the minimum order required to book it.",
            "headers": {
              "Access-Control-Allow-Origin": {
                "description": "Specifies the permitted origins",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Table"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. There was an error in the request, such as a missing or invalid tableId."
          }
        },
        "security": [
          {
            "authorizer": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "type": "aws_proxy",
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:905418349556:function:api_handler/invocations",
          "responses": {
            "default": {
              "statusCode": "200",
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          },
          "passthroughBehavior": "when_no_match"
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Empty": {
        "title": "Empty Schema",
        "type": "object"
      },
      "Reservation": {
        "title": "Reservation Schema",
        "type": "object",
        "properties": {
          "tableNumber": {
            "type": "number",
            "description": "number of the table"
          },
          "clientName": {
            "type": "string",
            "description": "name of the client"
          },
          "phoneNumber": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "reservation date in yyyy-MM-dd format"
          },
          "slotTimeStart": {
            "type": "string",
            "format": "time",
            "pattern": "^[0-2][0-9]:[0-5][0-9]$",
            "description": "start time of the slot in HH:MM format"
          },
          "slotTimeEnd": {
            "type": "string",
            "format": "time",
            "pattern": "^[0-2][0-9]:[0-5][0-9]$",
            "description": "end time of the slot in HH:MM format"
          }
        },
        "required": [
          "tableNumber",
          "clientName",
          "phoneNumber",
          "date",
          "slotTimeStart",
          "slotTimeEnd"
        ]
      },
      "Table": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Unique identifier for the table"
          },
          "number": {
            "type": "number",
            "description": "Number of the table"
          },
          "places": {
            "type": "number",
            "description": "Amount of people that can sit at the table"
          },
          "isVip": {
            "type": "boolean",
            "description": "Indicates if the table is in the VIP hall"
          },
          "minOrder": {
            "type": "number",
            "description": "Table deposit required to book it",
            "nullable": true
          }
        },
        "required": [
          "id",
          "number",
          "places",
          "isVip"
        ]
      },
      "ReservationRequest": {
        "type": "object",
        "properties": {
          "tableNumber": {
            "type": "number",
            "description": "Number of the table to reserve."
          },
          "clientName": {
            "type": "string",
            "description": "Name of the client making the reservation."
          },
          "phoneNumber": {
            "type": "string",
            "description": "Contact phone number for the reservation."
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Date of the reservation in yyyy-MM-dd format."
          },
          "slotTimeStart": {
            "type": "string",
            "format": "time",
            "description": "Start time of the reservation slot in 'HH:MM' format."
          },
          "slotTimeEnd": {
            "type": "string",
            "format": "time",
            "description": "End time of the reservation slot in 'HH:MM' format."
          }
        },
        "required": [
          "tableNumber",
          "clientName",
          "phoneNumber",
          "date",
          "slotTimeStart",
          "slotTimeEnd"
        ]
      },
      "ReservationResponse": {
        "type": "object",
        "properties": {
          "reservationId": {
            "type": "string",
            "format": "uuid",
            "description": "Universally unique identifier for the reservation."
          }
        }
      },
      "TableRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Unique identifier for the table"
          },
          "number": {
            "type": "number",
            "description": "Number of the table"
          },
          "places": {
            "type": "number",
            "description": "Amount of people that can sit at the table"
          },
          "isVip": {
            "type": "boolean",
            "description": "Indicates if the table is in the VIP hall"
          },
          "minOrder": {
            "type": "number",
            "description": "Minimum order amount required to book the table",
            "nullable": true
          }
        },
        "required": [
          "id",
          "number",
          "places",
          "isVip"
        ]
      },
      "TableResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "ID of the created table"
          }
        }
      },
      "SignUpRequest": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "First name of the user."
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the user."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the user, needs to be valid."
          },
          "password": {
            "type": "string",
            "description": "Password for the account, which needs to be alphanumeric including any of '$%^*-_'. Minimum 12 characters.",
            "pattern": "^(?=.*[A-Za-z])(?=.*\\d)(?=.*[$%^*\\-_])[A-Za-z\\d$%^*\\-_]{12,}$"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "email",
          "password"
        ]
      },
      "SignInRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the user, needs to be valid."
          },
          "password": {
            "type": "string",
            "description": "Password for the account, which needs to be alphanumeric including any of '$%^*'. Minimum 12 characters.",
            "pattern": "^(?=.*[A-Za-z])(?=.*\\d)(?=.*[$%^*])[A-Za-z\\d$%^*]{12,}$"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "SignInResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "Access token issued upon successful authentication that can be used for subsequent requests."
          }
        }
      }
    },
    "securitySchemes": {
      "authorizer": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "x-amazon-apigateway-authtype": "cognito_user_pools",
        "x-amazon-apigateway-authorizer": {
          "type": "cognito_user_pools",
          "x-syndicate-cognito-userpool-names": [
            "${booking_userpool}"
          ]
        }
      }
    }
  }
}